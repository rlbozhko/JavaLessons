По сути прячет в один метод вызов нескольких других методов, т.е. упрощает логику,
к примеру утильные классы, которые потом используют по всему проекту (фасад=== спрятать),
// фасадный метод через ассоциацию  и вызова методов у аасоциированных обьектов
    public void start() {
        cpu.start();
        os.load();
    }

реализуется или через передачу данных и ссылок в виде параметров фасадного метода, либо через ассоциацию
и вызова методов у аасоциированных обьектов , ВОЗМОЖНА еще какая-то реализация...

// пример в верху это через ассоциацию  и вызова методов у аасоциированных обьектов

----
// фасадный метод через передачу данных и ссылок в виде параметров фасадного метода
    public void start(Cpu cpu, Os os) {
        cpu.start();
        os.load();
    }


/// более сложно скрываем сложную логику

   public static void convertDate(String format, String timezone) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);

        ZoneId zoneId = ZoneId.of(timezone);

        LocalDateTime now = LocalDateTime.now(zoneId);

        System.out.println(now.format(formatter));
    }