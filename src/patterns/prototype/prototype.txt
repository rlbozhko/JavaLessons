Задаёт виды создаваемых объектов с помощью экземпляра-прототипа
 и создаёт новые объекты путём копирования этого прототипа.
 Он позволяет уйти от реализации и позволяет следовать принципу «программирование через интерфейсы».
 В качестве возвращающего типа указывается интерфейс/абстрактный класс на вершине иерархии,
 а классы-наследники могут подставить туда наследника, реализующего этот тип.

Проще говоря, это паттерн создания объекта через клонирование другого объекта вместо создания через конструктор.

Применимость
Паттерн используется чтобы:

избежать дополнительных усилий по созданию объекта стандартным путём
(имеется в виду использование конструктора, так как в этом случае также будут вызваны конструкторы
всей иерархии предков объекта), когда это непозволительно дорого для приложения.

т.е. клонирование просто копирует (возможно побайтово) одну область памяти в другую,
а создание через конструктор вызывает дополнительные механизмы - к примеру обращается к базам данных...

избежать наследования создателя объекта (object creator) в клиентском приложении,
как это делает паттерн abstract factory.
Используйте этот шаблон проектирования, когда системe безразлично как именно в ней создаются,
компонуются и представляются продукты:

инстанцируемые классы определяются во время выполнения, например с помощью динамической загрузки;
избежать построения иерархий классов или фабрик, параллельных иерархии классов продуктов;
экземпляры класса могут находиться в одном из нескольких различных состояний.
Может оказаться удобнее установить соответствующее число прототипов и клонировать их,
а не инстанцировать каждый раз класс вручную в подходящем состоянии.